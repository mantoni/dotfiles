snippet mo
	/*eslint-env mocha*/${1}
snippet use
	'use strict';${1}
snippet test
	/*eslint-env mocha*/
	'use strict';

	const assert = require('assert');
	const ${1:module} = require('../lib/$1');

	describe('$1', () => {

		it('${2}', () => {
			${3}
		});

	});
snippet glo
	/*global ${1}*/
snippet )
	) => {${1}}
snippet v
	var ${1:name} = ${2:value};${3}
snippet l
	let ${1:name} = ${2:value};${3}
snippet c
	const ${1:name} = ${2:value};${3}
snippet f
	function ${1}(${2}) {
		${3}
	}
snippet if
	if (${1:condition}) {
		${2}
	}
snippet fi
	for (let i = 0; i < ${1:array}.length; i++) {
		${2:value} = $1[i];
		${3}
	}
snippet fk
	for (let ${1:key} in ${2:map}) {
		if ($2.hasOwnProperty($1)) {
			${3}
		}
	}
snippet fe
	forEach((${1:item}) => {
		${2}
	});
snippet map
	map((${1:item}) => {
		return ${2};
	});
snippet filter
	filter((${1:item}) => {
		return ${2};
	});
snippet some
	some((${1:item}) => {
		return ${2};
	});
snippet every
	every((${1:item}) => {
		return ${2};
	});
snippet reduce
	map((${2:arr}, ${3:item}) => {
		${4}
	}, ${1:[]});
snippet try
	try {
		${1}
	} catch (e) {
		${2}
	}
snippet ?
	${1:condition} ? ${2:true} : ${3:false};${4}
snippet re
	const ${1:name} = require('${2:$1}');${3}
snippet ex
	exports.${1:name} = ${2};
snippet me
	module.exports = ${1};
snippet desc
	describe('${1}', () => {

		${2}

	});
snippet it
	it('${1}', () => {
		${2}
	});
snippet before
	before(() => {
		${1}
	});
snippet after
	after(() => {
		${1}
	});
snippet beforeE
	beforeEach(() => {
		${1}
	});
snippet afterE
	afterEach(() => {
		${1}
	});
snippet ae
	assert.equal(${1:val}, ${2:expected});${3}
snippet as
	assert.strictEqual(${1:val}, ${2:expected});${3}
snippet ad
	assert.deepEqual(${1:val}, ${2:expected});${3}
snippet at
	assert.throws(() => {
		${2};
	}, ${1:Error});
snippet ai
	assert.ifError(${1:err});${2}
snippet s
	const ${1:spy} = sinon.spy();${2}
snippet st
	const ${1:stub} = sinon.stub();${2}
snippet sa
	sinon.assert.${1:assertion}(${2:spy}, ${3});
snippet s1
	sinon.assert.calledOnce(${1:spy});${2}
snippet s2
	sinon.assert.calledTwice(${1:spy});${2}
snippet s3
	sinon.assert.calledThrice(${1:spy});${2}
snippet sn
	sinon.assert.notCalled(${1:spy});${2}
snippet sw
	sinon.assert.calledWith(${1:spy}, ${2});
snippet swm
	sinon.assert.calledWithMatch(${1:spy}, ${2});
snippet swe
	sinon.assert.calledWithExactly(${1:spy}, ${2});
snippet snw
	sinon.assert.neverCalledWith(${1:spy}, ${2});
snippet sm
	sinon.match.${1}
snippet sand
	let sandbox;

	beforeEach(() => {
		sandbox = sinon.sandbox.create();${1}
	});

	afterEach(() => {
		sandbox.restore();
	});

snippet clock
	clock = sandbox.useFakeTimers();${1}
snippet ss
	sandbox.stub(${1:object}, '${2:property}');${3}
snippet log
	console.log(${1});
