snippet use
	'use strict';${1}
snippet test
	import { assert, refute, match, sinon } from '@sinonjs/referee-sinon';
	import { ${1} } from './`substitute(expand('%:t'), '\.test\.js$', '.js', 'g')`');

	describe('`substitute(@%, '\.test\.js$', '', 'g')`', () => {
		it('${2}', () => {
			${3}
		});
	});
snippet glo
	/*global ${1}*/
snippet f
	function ${1}(${2}) {
		${3}
	}
snippet af
	async function ${1}(${2}) {
		${3}
	}
snippet fe
	forEach((${1:item}) => {
		${2}
	});
snippet map
	map((${1:item}) => {
		return ${2};
	});
snippet filter
	filter((${1:item}) => {
		return ${2};
	});
snippet some
	some((${1:item}) => {
		return ${2};
	});
snippet every
	every((${1:item}) => {
		return ${2};
	});
snippet reduce
	map((${2:arr}, ${3:item}) => {
		${4}
	}, ${1:[]});
snippet try
	try {
		${1}
	} catch (e) {
		${2}
	}
snippet re
	const ${1} = require('${2}');${3}
snippet ex
	exports.${1}
snippet desc
	describe('${1}', () => {
		${2}
	});
snippet context
	context('${1}', () => {
		${2}
	});
snippet it
	it('${1}', () => {
		${2}
	});
snippet before
	before(() => {
		${1}
	});
snippet after
	after(() => {
		${1}
	});
snippet beforeE
	beforeEach(() => {
		${1}
	});
snippet afterE
	afterEach(() => {
		${1:sinon.restore();}
	});
snippet a
	assert.
snippet r
	refute.
snippet assert.e
	assert.equals(${1:actual}, ${2:expected});${3}
snippet ae
	assert.equals(${1:actual}, ${2:expected});${3}
snippet ac
	assert.called${1:OnceWith}(${2:actual}, ${3:expected});${4}
snippet rc
	refute.called(${1:actual});${2}
snippet refute.e
	refute.equals(${1:actual}, ${2:expected});${3}
snippet assert.ex
	assert.exception(() => {
		${2};
	}, {
		name: 'Error',
		message: ''
	});
snippet refute.ex
	refute.exception(() => {
		${1};
	});
snippet assert.m
	assert.match(${1:actual}, ${2:matcher});${3}
snippet refute.m
	refute.match(${1:actual}, ${2:matcher});${3}
snippet assert.j
	assert.json(${1:json}, ${2:expected});${3}
snippet refute.j
	refute.json(${1:json}, ${2:expected});${3}
snippet assert.mj
	assert.matchJson(${1:json}, ${2:matcher});${3}
snippet refute.mj
	refute.matchJson(${1:json}, ${2:matcher});${3}
snippet assert.n
	assert.isNull(${1:err});${2}
snippet an
	assert.isNull(${1:err});${2}
snippet refute.n
	refute.isNull(${1:err});${2}
snippet assert.isT
	assert.isTrue(${1:boolean});${2}
snippet refute.isT
	refute.isTrue(${1:boolean});${2}
snippet assert.isF
	assert.isFalse(${1:boolean});${2}
snippet refute.isF
	refute.isFalse(${1:boolean});${2}
snippet assert.isS
	assert.isString(${1:string});${2}
snippet refute.isS
	refute.isString(${1:string});${2}
snippet assert.isN
	assert.isNumber(${1:number});${2}
snippet refute.isN
	refute.isNumber(${1:number});${2}
snippet assert.isB
	assert.isBoolean(${1:boolean});${2}
snippet refute.isB
	refute.isBoolean(${1:boolean});${2}
snippet assert.isO
	assert.isObject(${1:object});${2}
snippet refute.isO
	refute.isObject(${1:object});${2}
snippet assert.c
	assert.called(${1:spy});${2}
snippet refute.c
	refute.called(${1:spy});${2}
snippet sinon.m
	sinon.match.
snippet sinon.r
	sinon.restore();${1}
snippet clock
	clock = sinon.useFakeTimers();${1}
snippet server
	server = sinon.useFakeServer();${1}
snippet fa
	sinon.fake();${1}
snippet fr
	sinon.fake.returns(${1});${2}
snippet ft
	sinon.fake.throws(new ${1:Error}(${2}));${3}
snippet fy
	sinon.fake.yields(${1});${2}
snippet log
	console.log(${1});
snippet ls
	console.log(String(${1}));
snippet uuid
	'`trim(system("uuidgen | string lower"))`'${1}
snippet id
	'${1:pre}_`trim(system("node -e 'import(\\\\'nanoid\\\\').then(({ nanoid }) => console.log(nanoid(10)))'"))`'${2}
snippet ts
	`trim(system("node -p 'Date.now() - Math.ceil(Math.random() * 360000 * 24 * 10)'"))`${1}
